// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClientMessage struct {
	// Types that are valid to be assigned to Message:
	//	*ClientMessage_JoinRequest
	//	*ClientMessage_GameStartSig
	//	*ClientMessage_HandStartSig
	//	*ClientMessage_ShuffleResponse
	//	*ClientMessage_CardDecryptionKey
	//	*ClientMessage_PlayCard_
	//	*ClientMessage_DrawCard
	//	*ClientMessage_RevealHand
	//	*ClientMessage_HandFinishedSig
	//	*ClientMessage_Error
	Message              isClientMessage_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ClientMessage) Reset()         { *m = ClientMessage{} }
func (m *ClientMessage) String() string { return proto.CompactTextString(m) }
func (*ClientMessage) ProtoMessage()    {}
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{0}
}
func (m *ClientMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientMessage.Unmarshal(m, b)
}
func (m *ClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientMessage.Marshal(b, m, deterministic)
}
func (dst *ClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessage.Merge(dst, src)
}
func (m *ClientMessage) XXX_Size() int {
	return xxx_messageInfo_ClientMessage.Size(m)
}
func (m *ClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessage proto.InternalMessageInfo

type isClientMessage_Message interface {
	isClientMessage_Message()
}

type ClientMessage_JoinRequest struct {
	JoinRequest *Player `protobuf:"bytes,1,opt,name=join_request,json=joinRequest,proto3,oneof"`
}
type ClientMessage_GameStartSig struct {
	GameStartSig []byte `protobuf:"bytes,2,opt,name=game_start_sig,json=gameStartSig,proto3,oneof"`
}
type ClientMessage_HandStartSig struct {
	HandStartSig []byte `protobuf:"bytes,3,opt,name=hand_start_sig,json=handStartSig,proto3,oneof"`
}
type ClientMessage_ShuffleResponse struct {
	ShuffleResponse *ClientMessage_DeckShuffle `protobuf:"bytes,4,opt,name=shuffle_response,json=shuffleResponse,proto3,oneof"`
}
type ClientMessage_CardDecryptionKey struct {
	CardDecryptionKey []byte `protobuf:"bytes,5,opt,name=card_decryption_key,json=cardDecryptionKey,proto3,oneof"`
}
type ClientMessage_PlayCard_ struct {
	PlayCard *ClientMessage_PlayCard `protobuf:"bytes,6,opt,name=play_card,json=playCard,proto3,oneof"`
}
type ClientMessage_DrawCard struct {
	DrawCard bool `protobuf:"varint,7,opt,name=draw_card,json=drawCard,proto3,oneof"`
}
type ClientMessage_RevealHand struct {
	RevealHand *ClientMessage_HandInfo `protobuf:"bytes,8,opt,name=reveal_hand,json=revealHand,proto3,oneof"`
}
type ClientMessage_HandFinishedSig struct {
	HandFinishedSig []byte `protobuf:"bytes,9,opt,name=hand_finished_sig,json=handFinishedSig,proto3,oneof"`
}
type ClientMessage_Error struct {
	Error string `protobuf:"bytes,10,opt,name=error,proto3,oneof"`
}

func (*ClientMessage_JoinRequest) isClientMessage_Message()       {}
func (*ClientMessage_GameStartSig) isClientMessage_Message()      {}
func (*ClientMessage_HandStartSig) isClientMessage_Message()      {}
func (*ClientMessage_ShuffleResponse) isClientMessage_Message()   {}
func (*ClientMessage_CardDecryptionKey) isClientMessage_Message() {}
func (*ClientMessage_PlayCard_) isClientMessage_Message()         {}
func (*ClientMessage_DrawCard) isClientMessage_Message()          {}
func (*ClientMessage_RevealHand) isClientMessage_Message()        {}
func (*ClientMessage_HandFinishedSig) isClientMessage_Message()   {}
func (*ClientMessage_Error) isClientMessage_Message()             {}

func (m *ClientMessage) GetMessage() isClientMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ClientMessage) GetJoinRequest() *Player {
	if x, ok := m.GetMessage().(*ClientMessage_JoinRequest); ok {
		return x.JoinRequest
	}
	return nil
}

func (m *ClientMessage) GetGameStartSig() []byte {
	if x, ok := m.GetMessage().(*ClientMessage_GameStartSig); ok {
		return x.GameStartSig
	}
	return nil
}

func (m *ClientMessage) GetHandStartSig() []byte {
	if x, ok := m.GetMessage().(*ClientMessage_HandStartSig); ok {
		return x.HandStartSig
	}
	return nil
}

func (m *ClientMessage) GetShuffleResponse() *ClientMessage_DeckShuffle {
	if x, ok := m.GetMessage().(*ClientMessage_ShuffleResponse); ok {
		return x.ShuffleResponse
	}
	return nil
}

func (m *ClientMessage) GetCardDecryptionKey() []byte {
	if x, ok := m.GetMessage().(*ClientMessage_CardDecryptionKey); ok {
		return x.CardDecryptionKey
	}
	return nil
}

func (m *ClientMessage) GetPlayCard() *ClientMessage_PlayCard {
	if x, ok := m.GetMessage().(*ClientMessage_PlayCard_); ok {
		return x.PlayCard
	}
	return nil
}

func (m *ClientMessage) GetDrawCard() bool {
	if x, ok := m.GetMessage().(*ClientMessage_DrawCard); ok {
		return x.DrawCard
	}
	return false
}

func (m *ClientMessage) GetRevealHand() *ClientMessage_HandInfo {
	if x, ok := m.GetMessage().(*ClientMessage_RevealHand); ok {
		return x.RevealHand
	}
	return nil
}

func (m *ClientMessage) GetHandFinishedSig() []byte {
	if x, ok := m.GetMessage().(*ClientMessage_HandFinishedSig); ok {
		return x.HandFinishedSig
	}
	return nil
}

func (m *ClientMessage) GetError() string {
	if x, ok := m.GetMessage().(*ClientMessage_Error); ok {
		return x.Error
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ClientMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ClientMessage_OneofMarshaler, _ClientMessage_OneofUnmarshaler, _ClientMessage_OneofSizer, []interface{}{
		(*ClientMessage_JoinRequest)(nil),
		(*ClientMessage_GameStartSig)(nil),
		(*ClientMessage_HandStartSig)(nil),
		(*ClientMessage_ShuffleResponse)(nil),
		(*ClientMessage_CardDecryptionKey)(nil),
		(*ClientMessage_PlayCard_)(nil),
		(*ClientMessage_DrawCard)(nil),
		(*ClientMessage_RevealHand)(nil),
		(*ClientMessage_HandFinishedSig)(nil),
		(*ClientMessage_Error)(nil),
	}
}

func _ClientMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ClientMessage)
	// message
	switch x := m.Message.(type) {
	case *ClientMessage_JoinRequest:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinRequest); err != nil {
			return err
		}
	case *ClientMessage_GameStartSig:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.GameStartSig)
	case *ClientMessage_HandStartSig:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.HandStartSig)
	case *ClientMessage_ShuffleResponse:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ShuffleResponse); err != nil {
			return err
		}
	case *ClientMessage_CardDecryptionKey:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.CardDecryptionKey)
	case *ClientMessage_PlayCard_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlayCard); err != nil {
			return err
		}
	case *ClientMessage_DrawCard:
		t := uint64(0)
		if x.DrawCard {
			t = 1
		}
		b.EncodeVarint(7<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *ClientMessage_RevealHand:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RevealHand); err != nil {
			return err
		}
	case *ClientMessage_HandFinishedSig:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.HandFinishedSig)
	case *ClientMessage_Error:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Error)
	case nil:
	default:
		return fmt.Errorf("ClientMessage.Message has unexpected type %T", x)
	}
	return nil
}

func _ClientMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ClientMessage)
	switch tag {
	case 1: // message.join_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Player)
		err := b.DecodeMessage(msg)
		m.Message = &ClientMessage_JoinRequest{msg}
		return true, err
	case 2: // message.game_start_sig
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Message = &ClientMessage_GameStartSig{x}
		return true, err
	case 3: // message.hand_start_sig
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Message = &ClientMessage_HandStartSig{x}
		return true, err
	case 4: // message.shuffle_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientMessage_DeckShuffle)
		err := b.DecodeMessage(msg)
		m.Message = &ClientMessage_ShuffleResponse{msg}
		return true, err
	case 5: // message.card_decryption_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Message = &ClientMessage_CardDecryptionKey{x}
		return true, err
	case 6: // message.play_card
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientMessage_PlayCard)
		err := b.DecodeMessage(msg)
		m.Message = &ClientMessage_PlayCard_{msg}
		return true, err
	case 7: // message.draw_card
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Message = &ClientMessage_DrawCard{x != 0}
		return true, err
	case 8: // message.reveal_hand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientMessage_HandInfo)
		err := b.DecodeMessage(msg)
		m.Message = &ClientMessage_RevealHand{msg}
		return true, err
	case 9: // message.hand_finished_sig
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Message = &ClientMessage_HandFinishedSig{x}
		return true, err
	case 10: // message.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Message = &ClientMessage_Error{x}
		return true, err
	default:
		return false, nil
	}
}

func _ClientMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ClientMessage)
	// message
	switch x := m.Message.(type) {
	case *ClientMessage_JoinRequest:
		s := proto.Size(x.JoinRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientMessage_GameStartSig:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.GameStartSig)))
		n += len(x.GameStartSig)
	case *ClientMessage_HandStartSig:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.HandStartSig)))
		n += len(x.HandStartSig)
	case *ClientMessage_ShuffleResponse:
		s := proto.Size(x.ShuffleResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientMessage_CardDecryptionKey:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.CardDecryptionKey)))
		n += len(x.CardDecryptionKey)
	case *ClientMessage_PlayCard_:
		s := proto.Size(x.PlayCard)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientMessage_DrawCard:
		n += 1 // tag and wire
		n += 1
	case *ClientMessage_RevealHand:
		s := proto.Size(x.RevealHand)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientMessage_HandFinishedSig:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.HandFinishedSig)))
		n += len(x.HandFinishedSig)
	case *ClientMessage_Error:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Error)))
		n += len(x.Error)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ClientMessage_DeckShuffle struct {
	// The set of cards that are affected depending on which stage
	WorkingCardSet       [][]byte `protobuf:"bytes,1,rep,name=working_card_set,json=workingCardSet,proto3" json:"working_card_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientMessage_DeckShuffle) Reset()         { *m = ClientMessage_DeckShuffle{} }
func (m *ClientMessage_DeckShuffle) String() string { return proto.CompactTextString(m) }
func (*ClientMessage_DeckShuffle) ProtoMessage()    {}
func (*ClientMessage_DeckShuffle) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{0, 0}
}
func (m *ClientMessage_DeckShuffle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientMessage_DeckShuffle.Unmarshal(m, b)
}
func (m *ClientMessage_DeckShuffle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientMessage_DeckShuffle.Marshal(b, m, deterministic)
}
func (dst *ClientMessage_DeckShuffle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessage_DeckShuffle.Merge(dst, src)
}
func (m *ClientMessage_DeckShuffle) XXX_Size() int {
	return xxx_messageInfo_ClientMessage_DeckShuffle.Size(m)
}
func (m *ClientMessage_DeckShuffle) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessage_DeckShuffle.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessage_DeckShuffle proto.InternalMessageInfo

func (m *ClientMessage_DeckShuffle) GetWorkingCardSet() [][]byte {
	if m != nil {
		return m.WorkingCardSet
	}
	return nil
}

type ClientMessage_PlayCard struct {
	// The encrypted card to play.
	EncryptedCard []byte `protobuf:"bytes,1,opt,name=encrypted_card,json=encryptedCard,proto3" json:"encrypted_card,omitempty"`
	// The unencrypted card to play.
	UnencryptedCard int32 `protobuf:"varint,2,opt,name=unencrypted_card,json=unencryptedCard,proto3" json:"unencrypted_card,omitempty"`
	// Everyone's card decryption keys, by player index.
	CardDecryptionKeys [][]byte `protobuf:"bytes,3,rep,name=card_decryption_keys,json=cardDecryptionKeys,proto3" json:"card_decryption_keys,omitempty"`
	// If the card is a wild card, this is its color.
	WildColor            int32    `protobuf:"varint,4,opt,name=wild_color,json=wildColor,proto3" json:"wild_color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientMessage_PlayCard) Reset()         { *m = ClientMessage_PlayCard{} }
func (m *ClientMessage_PlayCard) String() string { return proto.CompactTextString(m) }
func (*ClientMessage_PlayCard) ProtoMessage()    {}
func (*ClientMessage_PlayCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{0, 1}
}
func (m *ClientMessage_PlayCard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientMessage_PlayCard.Unmarshal(m, b)
}
func (m *ClientMessage_PlayCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientMessage_PlayCard.Marshal(b, m, deterministic)
}
func (dst *ClientMessage_PlayCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessage_PlayCard.Merge(dst, src)
}
func (m *ClientMessage_PlayCard) XXX_Size() int {
	return xxx_messageInfo_ClientMessage_PlayCard.Size(m)
}
func (m *ClientMessage_PlayCard) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessage_PlayCard.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessage_PlayCard proto.InternalMessageInfo

func (m *ClientMessage_PlayCard) GetEncryptedCard() []byte {
	if m != nil {
		return m.EncryptedCard
	}
	return nil
}

func (m *ClientMessage_PlayCard) GetUnencryptedCard() int32 {
	if m != nil {
		return m.UnencryptedCard
	}
	return 0
}

func (m *ClientMessage_PlayCard) GetCardDecryptionKeys() [][]byte {
	if m != nil {
		return m.CardDecryptionKeys
	}
	return nil
}

func (m *ClientMessage_PlayCard) GetWildColor() int32 {
	if m != nil {
		return m.WildColor
	}
	return 0
}

type ClientMessage_HandInfo struct {
	// The set of encrypted cards the player holds.
	EncryptedCardsInHand [][]byte `protobuf:"bytes,1,rep,name=encrypted_cards_in_hand,json=encryptedCardsInHand,proto3" json:"encrypted_cards_in_hand,omitempty"`
	// The set of unencrypted cards the player holds.
	UnencryptedCardsInHand []int32 `protobuf:"varint,2,rep,packed,name=unencrypted_cards_in_hand,json=unencryptedCardsInHand,proto3" json:"unencrypted_cards_in_hand,omitempty"`
	// The map of all the player's decryption keys for all cards.
	CardDecryptionKeys   map[string][]byte `protobuf:"bytes,3,rep,name=card_decryption_keys,json=cardDecryptionKeys,proto3" json:"card_decryption_keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ClientMessage_HandInfo) Reset()         { *m = ClientMessage_HandInfo{} }
func (m *ClientMessage_HandInfo) String() string { return proto.CompactTextString(m) }
func (*ClientMessage_HandInfo) ProtoMessage()    {}
func (*ClientMessage_HandInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{0, 2}
}
func (m *ClientMessage_HandInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientMessage_HandInfo.Unmarshal(m, b)
}
func (m *ClientMessage_HandInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientMessage_HandInfo.Marshal(b, m, deterministic)
}
func (dst *ClientMessage_HandInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessage_HandInfo.Merge(dst, src)
}
func (m *ClientMessage_HandInfo) XXX_Size() int {
	return xxx_messageInfo_ClientMessage_HandInfo.Size(m)
}
func (m *ClientMessage_HandInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessage_HandInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessage_HandInfo proto.InternalMessageInfo

func (m *ClientMessage_HandInfo) GetEncryptedCardsInHand() [][]byte {
	if m != nil {
		return m.EncryptedCardsInHand
	}
	return nil
}

func (m *ClientMessage_HandInfo) GetUnencryptedCardsInHand() []int32 {
	if m != nil {
		return m.UnencryptedCardsInHand
	}
	return nil
}

func (m *ClientMessage_HandInfo) GetCardDecryptionKeys() map[string][]byte {
	if m != nil {
		return m.CardDecryptionKeys
	}
	return nil
}

type HostMessage struct {
	// Types that are valid to be assigned to Message:
	//	*HostMessage_Welcome_
	//	*HostMessage_PlayersUpdate_
	//	*HostMessage_GameUpdate_
	//	*HostMessage_ChatUpdate
	//	*HostMessage_GameStart_
	//	*HostMessage_HandStart_
	//	*HostMessage_ShuffleStage_1
	//	*HostMessage_ShuffleStage_2
	//	*HostMessage_ShuffleComplete
	//	*HostMessage_CardDecryption
	//	*HostMessage_GiveCard_
	//	*HostMessage_OneLeftCalled_
	//	*HostMessage_HandFinishStage_1
	//	*HostMessage_HandFinishStage_2
	//	*HostMessage_HandComplete_
	//	*HostMessage_Error
	Message              isHostMessage_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *HostMessage) Reset()         { *m = HostMessage{} }
func (m *HostMessage) String() string { return proto.CompactTextString(m) }
func (*HostMessage) ProtoMessage()    {}
func (*HostMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{1}
}
func (m *HostMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostMessage.Unmarshal(m, b)
}
func (m *HostMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostMessage.Marshal(b, m, deterministic)
}
func (dst *HostMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMessage.Merge(dst, src)
}
func (m *HostMessage) XXX_Size() int {
	return xxx_messageInfo_HostMessage.Size(m)
}
func (m *HostMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HostMessage proto.InternalMessageInfo

type isHostMessage_Message interface {
	isHostMessage_Message()
}

type HostMessage_Welcome_ struct {
	Welcome *HostMessage_Welcome `protobuf:"bytes,1,opt,name=welcome,proto3,oneof"`
}
type HostMessage_PlayersUpdate_ struct {
	PlayersUpdate *HostMessage_PlayersUpdate `protobuf:"bytes,2,opt,name=players_update,json=playersUpdate,proto3,oneof"`
}
type HostMessage_GameUpdate_ struct {
	GameUpdate *HostMessage_GameUpdate `protobuf:"bytes,3,opt,name=game_update,json=gameUpdate,proto3,oneof"`
}
type HostMessage_ChatUpdate struct {
	ChatUpdate *HostMessage_ChatMessagesAdded `protobuf:"bytes,4,opt,name=chat_update,json=chatUpdate,proto3,oneof"`
}
type HostMessage_GameStart_ struct {
	GameStart *HostMessage_GameStart `protobuf:"bytes,5,opt,name=game_start,json=gameStart,proto3,oneof"`
}
type HostMessage_HandStart_ struct {
	HandStart *HostMessage_HandStart `protobuf:"bytes,6,opt,name=hand_start,json=handStart,proto3,oneof"`
}
type HostMessage_ShuffleStage_1 struct {
	ShuffleStage_1 *HostMessage_DeckShuffle `protobuf:"bytes,7,opt,name=shuffle_stage_1,json=shuffleStage1,proto3,oneof"`
}
type HostMessage_ShuffleStage_2 struct {
	ShuffleStage_2 *HostMessage_DeckShuffle `protobuf:"bytes,8,opt,name=shuffle_stage_2,json=shuffleStage2,proto3,oneof"`
}
type HostMessage_ShuffleComplete struct {
	ShuffleComplete *HostMessage_DeckShuffle `protobuf:"bytes,9,opt,name=shuffle_complete,json=shuffleComplete,proto3,oneof"`
}
type HostMessage_CardDecryption struct {
	CardDecryption *HostMessage_GetCardDecryption `protobuf:"bytes,10,opt,name=card_decryption,json=cardDecryption,proto3,oneof"`
}
type HostMessage_GiveCard_ struct {
	GiveCard *HostMessage_GiveCard `protobuf:"bytes,11,opt,name=give_card,json=giveCard,proto3,oneof"`
}
type HostMessage_OneLeftCalled_ struct {
	OneLeftCalled *HostMessage_OneLeftCalled `protobuf:"bytes,12,opt,name=one_left_called,json=oneLeftCalled,proto3,oneof"`
}
type HostMessage_HandFinishStage_1 struct {
	HandFinishStage_1 bool `protobuf:"varint,13,opt,name=hand_finish_stage_1,json=handFinishStage1,proto3,oneof"`
}
type HostMessage_HandFinishStage_2 struct {
	HandFinishStage_2 *HostMessage_HandFinish `protobuf:"bytes,14,opt,name=hand_finish_stage_2,json=handFinishStage2,proto3,oneof"`
}
type HostMessage_HandComplete_ struct {
	HandComplete *HostMessage_HandComplete `protobuf:"bytes,15,opt,name=hand_complete,json=handComplete,proto3,oneof"`
}
type HostMessage_Error struct {
	Error string `protobuf:"bytes,16,opt,name=error,proto3,oneof"`
}

func (*HostMessage_Welcome_) isHostMessage_Message()          {}
func (*HostMessage_PlayersUpdate_) isHostMessage_Message()    {}
func (*HostMessage_GameUpdate_) isHostMessage_Message()       {}
func (*HostMessage_ChatUpdate) isHostMessage_Message()        {}
func (*HostMessage_GameStart_) isHostMessage_Message()        {}
func (*HostMessage_HandStart_) isHostMessage_Message()        {}
func (*HostMessage_ShuffleStage_1) isHostMessage_Message()    {}
func (*HostMessage_ShuffleStage_2) isHostMessage_Message()    {}
func (*HostMessage_ShuffleComplete) isHostMessage_Message()   {}
func (*HostMessage_CardDecryption) isHostMessage_Message()    {}
func (*HostMessage_GiveCard_) isHostMessage_Message()         {}
func (*HostMessage_OneLeftCalled_) isHostMessage_Message()    {}
func (*HostMessage_HandFinishStage_1) isHostMessage_Message() {}
func (*HostMessage_HandFinishStage_2) isHostMessage_Message() {}
func (*HostMessage_HandComplete_) isHostMessage_Message()     {}
func (*HostMessage_Error) isHostMessage_Message()             {}

func (m *HostMessage) GetMessage() isHostMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *HostMessage) GetWelcome() *HostMessage_Welcome {
	if x, ok := m.GetMessage().(*HostMessage_Welcome_); ok {
		return x.Welcome
	}
	return nil
}

func (m *HostMessage) GetPlayersUpdate() *HostMessage_PlayersUpdate {
	if x, ok := m.GetMessage().(*HostMessage_PlayersUpdate_); ok {
		return x.PlayersUpdate
	}
	return nil
}

func (m *HostMessage) GetGameUpdate() *HostMessage_GameUpdate {
	if x, ok := m.GetMessage().(*HostMessage_GameUpdate_); ok {
		return x.GameUpdate
	}
	return nil
}

func (m *HostMessage) GetChatUpdate() *HostMessage_ChatMessagesAdded {
	if x, ok := m.GetMessage().(*HostMessage_ChatUpdate); ok {
		return x.ChatUpdate
	}
	return nil
}

func (m *HostMessage) GetGameStart() *HostMessage_GameStart {
	if x, ok := m.GetMessage().(*HostMessage_GameStart_); ok {
		return x.GameStart
	}
	return nil
}

func (m *HostMessage) GetHandStart() *HostMessage_HandStart {
	if x, ok := m.GetMessage().(*HostMessage_HandStart_); ok {
		return x.HandStart
	}
	return nil
}

func (m *HostMessage) GetShuffleStage_1() *HostMessage_DeckShuffle {
	if x, ok := m.GetMessage().(*HostMessage_ShuffleStage_1); ok {
		return x.ShuffleStage_1
	}
	return nil
}

func (m *HostMessage) GetShuffleStage_2() *HostMessage_DeckShuffle {
	if x, ok := m.GetMessage().(*HostMessage_ShuffleStage_2); ok {
		return x.ShuffleStage_2
	}
	return nil
}

func (m *HostMessage) GetShuffleComplete() *HostMessage_DeckShuffle {
	if x, ok := m.GetMessage().(*HostMessage_ShuffleComplete); ok {
		return x.ShuffleComplete
	}
	return nil
}

func (m *HostMessage) GetCardDecryption() *HostMessage_GetCardDecryption {
	if x, ok := m.GetMessage().(*HostMessage_CardDecryption); ok {
		return x.CardDecryption
	}
	return nil
}

func (m *HostMessage) GetGiveCard() *HostMessage_GiveCard {
	if x, ok := m.GetMessage().(*HostMessage_GiveCard_); ok {
		return x.GiveCard
	}
	return nil
}

func (m *HostMessage) GetOneLeftCalled() *HostMessage_OneLeftCalled {
	if x, ok := m.GetMessage().(*HostMessage_OneLeftCalled_); ok {
		return x.OneLeftCalled
	}
	return nil
}

func (m *HostMessage) GetHandFinishStage_1() bool {
	if x, ok := m.GetMessage().(*HostMessage_HandFinishStage_1); ok {
		return x.HandFinishStage_1
	}
	return false
}

func (m *HostMessage) GetHandFinishStage_2() *HostMessage_HandFinish {
	if x, ok := m.GetMessage().(*HostMessage_HandFinishStage_2); ok {
		return x.HandFinishStage_2
	}
	return nil
}

func (m *HostMessage) GetHandComplete() *HostMessage_HandComplete {
	if x, ok := m.GetMessage().(*HostMessage_HandComplete_); ok {
		return x.HandComplete
	}
	return nil
}

func (m *HostMessage) GetError() string {
	if x, ok := m.GetMessage().(*HostMessage_Error); ok {
		return x.Error
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HostMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HostMessage_OneofMarshaler, _HostMessage_OneofUnmarshaler, _HostMessage_OneofSizer, []interface{}{
		(*HostMessage_Welcome_)(nil),
		(*HostMessage_PlayersUpdate_)(nil),
		(*HostMessage_GameUpdate_)(nil),
		(*HostMessage_ChatUpdate)(nil),
		(*HostMessage_GameStart_)(nil),
		(*HostMessage_HandStart_)(nil),
		(*HostMessage_ShuffleStage_1)(nil),
		(*HostMessage_ShuffleStage_2)(nil),
		(*HostMessage_ShuffleComplete)(nil),
		(*HostMessage_CardDecryption)(nil),
		(*HostMessage_GiveCard_)(nil),
		(*HostMessage_OneLeftCalled_)(nil),
		(*HostMessage_HandFinishStage_1)(nil),
		(*HostMessage_HandFinishStage_2)(nil),
		(*HostMessage_HandComplete_)(nil),
		(*HostMessage_Error)(nil),
	}
}

func _HostMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HostMessage)
	// message
	switch x := m.Message.(type) {
	case *HostMessage_Welcome_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Welcome); err != nil {
			return err
		}
	case *HostMessage_PlayersUpdate_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlayersUpdate); err != nil {
			return err
		}
	case *HostMessage_GameUpdate_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GameUpdate); err != nil {
			return err
		}
	case *HostMessage_ChatUpdate:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChatUpdate); err != nil {
			return err
		}
	case *HostMessage_GameStart_:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GameStart); err != nil {
			return err
		}
	case *HostMessage_HandStart_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HandStart); err != nil {
			return err
		}
	case *HostMessage_ShuffleStage_1:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ShuffleStage_1); err != nil {
			return err
		}
	case *HostMessage_ShuffleStage_2:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ShuffleStage_2); err != nil {
			return err
		}
	case *HostMessage_ShuffleComplete:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ShuffleComplete); err != nil {
			return err
		}
	case *HostMessage_CardDecryption:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CardDecryption); err != nil {
			return err
		}
	case *HostMessage_GiveCard_:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GiveCard); err != nil {
			return err
		}
	case *HostMessage_OneLeftCalled_:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OneLeftCalled); err != nil {
			return err
		}
	case *HostMessage_HandFinishStage_1:
		t := uint64(0)
		if x.HandFinishStage_1 {
			t = 1
		}
		b.EncodeVarint(13<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *HostMessage_HandFinishStage_2:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HandFinishStage_2); err != nil {
			return err
		}
	case *HostMessage_HandComplete_:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HandComplete); err != nil {
			return err
		}
	case *HostMessage_Error:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Error)
	case nil:
	default:
		return fmt.Errorf("HostMessage.Message has unexpected type %T", x)
	}
	return nil
}

func _HostMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HostMessage)
	switch tag {
	case 1: // message.welcome
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostMessage_Welcome)
		err := b.DecodeMessage(msg)
		m.Message = &HostMessage_Welcome_{msg}
		return true, err
	case 2: // message.players_update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostMessage_PlayersUpdate)
		err := b.DecodeMessage(msg)
		m.Message = &HostMessage_PlayersUpdate_{msg}
		return true, err
	case 3: // message.game_update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostMessage_GameUpdate)
		err := b.DecodeMessage(msg)
		m.Message = &HostMessage_GameUpdate_{msg}
		return true, err
	case 4: // message.chat_update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostMessage_ChatMessagesAdded)
		err := b.DecodeMessage(msg)
		m.Message = &HostMessage_ChatUpdate{msg}
		return true, err
	case 5: // message.game_start
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostMessage_GameStart)
		err := b.DecodeMessage(msg)
		m.Message = &HostMessage_GameStart_{msg}
		return true, err
	case 6: // message.hand_start
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostMessage_HandStart)
		err := b.DecodeMessage(msg)
		m.Message = &HostMessage_HandStart_{msg}
		return true, err
	case 7: // message.shuffle_stage_1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostMessage_DeckShuffle)
		err := b.DecodeMessage(msg)
		m.Message = &HostMessage_ShuffleStage_1{msg}
		return true, err
	case 8: // message.shuffle_stage_2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostMessage_DeckShuffle)
		err := b.DecodeMessage(msg)
		m.Message = &HostMessage_ShuffleStage_2{msg}
		return true, err
	case 9: // message.shuffle_complete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostMessage_DeckShuffle)
		err := b.DecodeMessage(msg)
		m.Message = &HostMessage_ShuffleComplete{msg}
		return true, err
	case 10: // message.card_decryption
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostMessage_GetCardDecryption)
		err := b.DecodeMessage(msg)
		m.Message = &HostMessage_CardDecryption{msg}
		return true, err
	case 11: // message.give_card
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostMessage_GiveCard)
		err := b.DecodeMessage(msg)
		m.Message = &HostMessage_GiveCard_{msg}
		return true, err
	case 12: // message.one_left_called
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostMessage_OneLeftCalled)
		err := b.DecodeMessage(msg)
		m.Message = &HostMessage_OneLeftCalled_{msg}
		return true, err
	case 13: // message.hand_finish_stage_1
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Message = &HostMessage_HandFinishStage_1{x != 0}
		return true, err
	case 14: // message.hand_finish_stage_2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostMessage_HandFinish)
		err := b.DecodeMessage(msg)
		m.Message = &HostMessage_HandFinishStage_2{msg}
		return true, err
	case 15: // message.hand_complete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostMessage_HandComplete)
		err := b.DecodeMessage(msg)
		m.Message = &HostMessage_HandComplete_{msg}
		return true, err
	case 16: // message.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Message = &HostMessage_Error{x}
		return true, err
	default:
		return false, nil
	}
}

func _HostMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HostMessage)
	// message
	switch x := m.Message.(type) {
	case *HostMessage_Welcome_:
		s := proto.Size(x.Welcome)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HostMessage_PlayersUpdate_:
		s := proto.Size(x.PlayersUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HostMessage_GameUpdate_:
		s := proto.Size(x.GameUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HostMessage_ChatUpdate:
		s := proto.Size(x.ChatUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HostMessage_GameStart_:
		s := proto.Size(x.GameStart)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HostMessage_HandStart_:
		s := proto.Size(x.HandStart)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HostMessage_ShuffleStage_1:
		s := proto.Size(x.ShuffleStage_1)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HostMessage_ShuffleStage_2:
		s := proto.Size(x.ShuffleStage_2)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HostMessage_ShuffleComplete:
		s := proto.Size(x.ShuffleComplete)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HostMessage_CardDecryption:
		s := proto.Size(x.CardDecryption)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HostMessage_GiveCard_:
		s := proto.Size(x.GiveCard)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HostMessage_OneLeftCalled_:
		s := proto.Size(x.OneLeftCalled)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HostMessage_HandFinishStage_1:
		n += 1 // tag and wire
		n += 1
	case *HostMessage_HandFinishStage_2:
		s := proto.Size(x.HandFinishStage_2)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HostMessage_HandComplete_:
		s := proto.Size(x.HandComplete)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HostMessage_Error:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Error)))
		n += len(x.Error)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HostMessage_Welcome struct {
	// This is the set of players at the table. It does not represent all spectators.
	Players []*Player `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	// The current game state or not present if no current game.
	GameUpdate *HostMessage_GameUpdate `protobuf:"bytes,2,opt,name=game_update,json=gameUpdate,proto3" json:"game_update,omitempty"`
	// Some of the most recent chat messages (older first).
	ChatMessages         []*ChatMessage `protobuf:"bytes,3,rep,name=chat_messages,json=chatMessages,proto3" json:"chat_messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HostMessage_Welcome) Reset()         { *m = HostMessage_Welcome{} }
func (m *HostMessage_Welcome) String() string { return proto.CompactTextString(m) }
func (*HostMessage_Welcome) ProtoMessage()    {}
func (*HostMessage_Welcome) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{1, 0}
}
func (m *HostMessage_Welcome) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostMessage_Welcome.Unmarshal(m, b)
}
func (m *HostMessage_Welcome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostMessage_Welcome.Marshal(b, m, deterministic)
}
func (dst *HostMessage_Welcome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMessage_Welcome.Merge(dst, src)
}
func (m *HostMessage_Welcome) XXX_Size() int {
	return xxx_messageInfo_HostMessage_Welcome.Size(m)
}
func (m *HostMessage_Welcome) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMessage_Welcome.DiscardUnknown(m)
}

var xxx_messageInfo_HostMessage_Welcome proto.InternalMessageInfo

func (m *HostMessage_Welcome) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *HostMessage_Welcome) GetGameUpdate() *HostMessage_GameUpdate {
	if m != nil {
		return m.GameUpdate
	}
	return nil
}

func (m *HostMessage_Welcome) GetChatMessages() []*ChatMessage {
	if m != nil {
		return m.ChatMessages
	}
	return nil
}

type HostMessage_PlayersUpdate struct {
	// The current set of players.
	Players              []*Player `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HostMessage_PlayersUpdate) Reset()         { *m = HostMessage_PlayersUpdate{} }
func (m *HostMessage_PlayersUpdate) String() string { return proto.CompactTextString(m) }
func (*HostMessage_PlayersUpdate) ProtoMessage()    {}
func (*HostMessage_PlayersUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{1, 1}
}
func (m *HostMessage_PlayersUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostMessage_PlayersUpdate.Unmarshal(m, b)
}
func (m *HostMessage_PlayersUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostMessage_PlayersUpdate.Marshal(b, m, deterministic)
}
func (dst *HostMessage_PlayersUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMessage_PlayersUpdate.Merge(dst, src)
}
func (m *HostMessage_PlayersUpdate) XXX_Size() int {
	return xxx_messageInfo_HostMessage_PlayersUpdate.Size(m)
}
func (m *HostMessage_PlayersUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMessage_PlayersUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_HostMessage_PlayersUpdate proto.InternalMessageInfo

func (m *HostMessage_PlayersUpdate) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

type HostMessage_GameUpdate struct {
	// The ID of this game. Always non-empty.
	GameId []byte `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	// The ID of the current hand. Always non-empty.
	HandId []byte `protobuf:"bytes,2,opt,name=hand_id,json=handId,proto3" json:"hand_id,omitempty"`
	// The number of cards in the draw pile.
	DeckRemaining int32 `protobuf:"varint,3,opt,name=deck_remaining,json=deckRemaining,proto3" json:"deck_remaining,omitempty"`
	// The cards in the discard pile. Always non-empty.
	DiscardStack []uint32 `protobuf:"varint,4,rep,packed,name=discard_stack,json=discardStack,proto3" json:"discard_stack,omitempty"`
	// The number of cards each player has. Always same length as player count.
	PlayerCardCounts []uint32 `protobuf:"varint,5,rep,packed,name=player_card_counts,json=playerCardCounts,proto3" json:"player_card_counts,omitempty"`
	// The score of each player at the start of the hand. Always same length as player count.
	PlayerScores []uint32 `protobuf:"varint,6,rep,packed,name=player_scores,json=playerScores,proto3" json:"player_scores,omitempty"`
	// The stated color of the last seen wild card.
	LastWildColor uint32 `protobuf:"varint,7,opt,name=last_wild_color,json=lastWildColor,proto3" json:"last_wild_color,omitempty"`
	// The index in the player array of the dealer for this hand.
	DealerIndex uint32 `protobuf:"varint,8,opt,name=dealer_index,json=dealerIndex,proto3" json:"dealer_index,omitempty"`
	// The index in the player array of the next to go player.
	CurrentPlayerIndex uint32 `protobuf:"varint,9,opt,name=current_player_index,json=currentPlayerIndex,proto3" json:"current_player_index,omitempty"`
	// Whether the direction is forward.
	Forward bool `protobuf:"varint,10,opt,name=forward,proto3" json:"forward,omitempty"`
	// The shared prime from hand start.
	SharedCardPrime []byte `protobuf:"bytes,11,opt,name=shared_card_prime,json=sharedCardPrime,proto3" json:"shared_card_prime,omitempty"`
	// The encrypted version of the last discard card.
	LastDiscardEncryptedCard []byte `protobuf:"bytes,12,opt,name=last_discard_encrypted_card,json=lastDiscardEncryptedCard,proto3" json:"last_discard_encrypted_card,omitempty"`
	// The decryption keys of the last discard card by player index.
	LastDiscardDecryptionKeys [][]byte `protobuf:"bytes,13,rep,name=last_discard_decryption_keys,json=lastDiscardDecryptionKeys,proto3" json:"last_discard_decryption_keys,omitempty"`
	// If set, this is the reason the entire game is complete. TODO: fix
	//
	// Types that are valid to be assigned to CompletionReason:
	//	*HostMessage_GameUpdate_Error
	//	*HostMessage_GameUpdate_PlayerId
	CompletionReason     isHostMessage_GameUpdate_CompletionReason `protobuf_oneof:"completion_reason"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *HostMessage_GameUpdate) Reset()         { *m = HostMessage_GameUpdate{} }
func (m *HostMessage_GameUpdate) String() string { return proto.CompactTextString(m) }
func (*HostMessage_GameUpdate) ProtoMessage()    {}
func (*HostMessage_GameUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{1, 2}
}
func (m *HostMessage_GameUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostMessage_GameUpdate.Unmarshal(m, b)
}
func (m *HostMessage_GameUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostMessage_GameUpdate.Marshal(b, m, deterministic)
}
func (dst *HostMessage_GameUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMessage_GameUpdate.Merge(dst, src)
}
func (m *HostMessage_GameUpdate) XXX_Size() int {
	return xxx_messageInfo_HostMessage_GameUpdate.Size(m)
}
func (m *HostMessage_GameUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMessage_GameUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_HostMessage_GameUpdate proto.InternalMessageInfo

type isHostMessage_GameUpdate_CompletionReason interface {
	isHostMessage_GameUpdate_CompletionReason()
}

type HostMessage_GameUpdate_Error struct {
	Error string `protobuf:"bytes,14,opt,name=error,proto3,oneof"`
}
type HostMessage_GameUpdate_PlayerId struct {
	PlayerId []byte `protobuf:"bytes,15,opt,name=player_id,json=playerId,proto3,oneof"`
}

func (*HostMessage_GameUpdate_Error) isHostMessage_GameUpdate_CompletionReason()    {}
func (*HostMessage_GameUpdate_PlayerId) isHostMessage_GameUpdate_CompletionReason() {}

func (m *HostMessage_GameUpdate) GetCompletionReason() isHostMessage_GameUpdate_CompletionReason {
	if m != nil {
		return m.CompletionReason
	}
	return nil
}

func (m *HostMessage_GameUpdate) GetGameId() []byte {
	if m != nil {
		return m.GameId
	}
	return nil
}

func (m *HostMessage_GameUpdate) GetHandId() []byte {
	if m != nil {
		return m.HandId
	}
	return nil
}

func (m *HostMessage_GameUpdate) GetDeckRemaining() int32 {
	if m != nil {
		return m.DeckRemaining
	}
	return 0
}

func (m *HostMessage_GameUpdate) GetDiscardStack() []uint32 {
	if m != nil {
		return m.DiscardStack
	}
	return nil
}

func (m *HostMessage_GameUpdate) GetPlayerCardCounts() []uint32 {
	if m != nil {
		return m.PlayerCardCounts
	}
	return nil
}

func (m *HostMessage_GameUpdate) GetPlayerScores() []uint32 {
	if m != nil {
		return m.PlayerScores
	}
	return nil
}

func (m *HostMessage_GameUpdate) GetLastWildColor() uint32 {
	if m != nil {
		return m.LastWildColor
	}
	return 0
}

func (m *HostMessage_GameUpdate) GetDealerIndex() uint32 {
	if m != nil {
		return m.DealerIndex
	}
	return 0
}

func (m *HostMessage_GameUpdate) GetCurrentPlayerIndex() uint32 {
	if m != nil {
		return m.CurrentPlayerIndex
	}
	return 0
}

func (m *HostMessage_GameUpdate) GetForward() bool {
	if m != nil {
		return m.Forward
	}
	return false
}

func (m *HostMessage_GameUpdate) GetSharedCardPrime() []byte {
	if m != nil {
		return m.SharedCardPrime
	}
	return nil
}

func (m *HostMessage_GameUpdate) GetLastDiscardEncryptedCard() []byte {
	if m != nil {
		return m.LastDiscardEncryptedCard
	}
	return nil
}

func (m *HostMessage_GameUpdate) GetLastDiscardDecryptionKeys() [][]byte {
	if m != nil {
		return m.LastDiscardDecryptionKeys
	}
	return nil
}

func (m *HostMessage_GameUpdate) GetError() string {
	if x, ok := m.GetCompletionReason().(*HostMessage_GameUpdate_Error); ok {
		return x.Error
	}
	return ""
}

func (m *HostMessage_GameUpdate) GetPlayerId() []byte {
	if x, ok := m.GetCompletionReason().(*HostMessage_GameUpdate_PlayerId); ok {
		return x.PlayerId
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HostMessage_GameUpdate) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HostMessage_GameUpdate_OneofMarshaler, _HostMessage_GameUpdate_OneofUnmarshaler, _HostMessage_GameUpdate_OneofSizer, []interface{}{
		(*HostMessage_GameUpdate_Error)(nil),
		(*HostMessage_GameUpdate_PlayerId)(nil),
	}
}

func _HostMessage_GameUpdate_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HostMessage_GameUpdate)
	// completion_reason
	switch x := m.CompletionReason.(type) {
	case *HostMessage_GameUpdate_Error:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Error)
	case *HostMessage_GameUpdate_PlayerId:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.PlayerId)
	case nil:
	default:
		return fmt.Errorf("HostMessage_GameUpdate.CompletionReason has unexpected type %T", x)
	}
	return nil
}

func _HostMessage_GameUpdate_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HostMessage_GameUpdate)
	switch tag {
	case 14: // completion_reason.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.CompletionReason = &HostMessage_GameUpdate_Error{x}
		return true, err
	case 15: // completion_reason.player_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.CompletionReason = &HostMessage_GameUpdate_PlayerId{x}
		return true, err
	default:
		return false, nil
	}
}

func _HostMessage_GameUpdate_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HostMessage_GameUpdate)
	// completion_reason
	switch x := m.CompletionReason.(type) {
	case *HostMessage_GameUpdate_Error:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Error)))
		n += len(x.Error)
	case *HostMessage_GameUpdate_PlayerId:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.PlayerId)))
		n += len(x.PlayerId)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HostMessage_ChatMessagesAdded struct {
	// The chat messages, always non-empty.
	Messages             []*ChatMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HostMessage_ChatMessagesAdded) Reset()         { *m = HostMessage_ChatMessagesAdded{} }
func (m *HostMessage_ChatMessagesAdded) String() string { return proto.CompactTextString(m) }
func (*HostMessage_ChatMessagesAdded) ProtoMessage()    {}
func (*HostMessage_ChatMessagesAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{1, 3}
}
func (m *HostMessage_ChatMessagesAdded) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostMessage_ChatMessagesAdded.Unmarshal(m, b)
}
func (m *HostMessage_ChatMessagesAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostMessage_ChatMessagesAdded.Marshal(b, m, deterministic)
}
func (dst *HostMessage_ChatMessagesAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMessage_ChatMessagesAdded.Merge(dst, src)
}
func (m *HostMessage_ChatMessagesAdded) XXX_Size() int {
	return xxx_messageInfo_HostMessage_ChatMessagesAdded.Size(m)
}
func (m *HostMessage_ChatMessagesAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMessage_ChatMessagesAdded.DiscardUnknown(m)
}

var xxx_messageInfo_HostMessage_ChatMessagesAdded proto.InternalMessageInfo

func (m *HostMessage_ChatMessagesAdded) GetMessages() []*ChatMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

type HostMessage_GameStart struct {
	// The ID of this new game.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The set of players that are participating in this game. Always at least 2.
	Players              []*Player `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HostMessage_GameStart) Reset()         { *m = HostMessage_GameStart{} }
func (m *HostMessage_GameStart) String() string { return proto.CompactTextString(m) }
func (*HostMessage_GameStart) ProtoMessage()    {}
func (*HostMessage_GameStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{1, 4}
}
func (m *HostMessage_GameStart) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostMessage_GameStart.Unmarshal(m, b)
}
func (m *HostMessage_GameStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostMessage_GameStart.Marshal(b, m, deterministic)
}
func (dst *HostMessage_GameStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMessage_GameStart.Merge(dst, src)
}
func (m *HostMessage_GameStart) XXX_Size() int {
	return xxx_messageInfo_HostMessage_GameStart.Size(m)
}
func (m *HostMessage_GameStart) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMessage_GameStart.DiscardUnknown(m)
}

var xxx_messageInfo_HostMessage_GameStart proto.InternalMessageInfo

func (m *HostMessage_GameStart) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *HostMessage_GameStart) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

type HostMessage_HandStart struct {
	// The ID of this hand.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The prime that will be used for shuffling during this hand.
	SharedCardPrime []byte `protobuf:"bytes,2,opt,name=shared_card_prime,json=sharedCardPrime,proto3" json:"shared_card_prime,omitempty"`
	// The scores of the players at the start of this hand.
	PlayerScores []uint32 `protobuf:"varint,3,rep,packed,name=player_scores,json=playerScores,proto3" json:"player_scores,omitempty"`
	// The index of the dealer for this hand.
	DealerIndex uint32 `protobuf:"varint,4,opt,name=dealer_index,json=dealerIndex,proto3" json:"dealer_index,omitempty"`
	// The signatures of the game start binaries for the players.
	GameStartPlayerSigs  [][]byte `protobuf:"bytes,5,rep,name=game_start_player_sigs,json=gameStartPlayerSigs,proto3" json:"game_start_player_sigs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostMessage_HandStart) Reset()         { *m = HostMessage_HandStart{} }
func (m *HostMessage_HandStart) String() string { return proto.CompactTextString(m) }
func (*HostMessage_HandStart) ProtoMessage()    {}
func (*HostMessage_HandStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{1, 5}
}
func (m *HostMessage_HandStart) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostMessage_HandStart.Unmarshal(m, b)
}
func (m *HostMessage_HandStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostMessage_HandStart.Marshal(b, m, deterministic)
}
func (dst *HostMessage_HandStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMessage_HandStart.Merge(dst, src)
}
func (m *HostMessage_HandStart) XXX_Size() int {
	return xxx_messageInfo_HostMessage_HandStart.Size(m)
}
func (m *HostMessage_HandStart) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMessage_HandStart.DiscardUnknown(m)
}

var xxx_messageInfo_HostMessage_HandStart proto.InternalMessageInfo

func (m *HostMessage_HandStart) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *HostMessage_HandStart) GetSharedCardPrime() []byte {
	if m != nil {
		return m.SharedCardPrime
	}
	return nil
}

func (m *HostMessage_HandStart) GetPlayerScores() []uint32 {
	if m != nil {
		return m.PlayerScores
	}
	return nil
}

func (m *HostMessage_HandStart) GetDealerIndex() uint32 {
	if m != nil {
		return m.DealerIndex
	}
	return 0
}

func (m *HostMessage_HandStart) GetGameStartPlayerSigs() [][]byte {
	if m != nil {
		return m.GameStartPlayerSigs
	}
	return nil
}

type HostMessage_DeckShuffle struct {
	// The set of cards this shuffle started with. Never changed. In order of a standard deck on hand start or the
	// discard pile sans top card on discard rotation.
	UnencryptedStartCards []uint32 `protobuf:"varint,1,rep,packed,name=unencrypted_start_cards,json=unencryptedStartCards,proto3" json:"unencrypted_start_cards,omitempty"`
	// The set of cards to work with. These are encrypted. Stage 1 they are encrypted with one key and shuffled. Stage 2
	// they are unencrypted from the one key and re-encrypted with a per-card key. Completion, they are just stored.
	WorkingCardSet [][]byte `protobuf:"bytes,2,rep,name=working_card_set,json=workingCardSet,proto3" json:"working_card_set,omitempty"`
	// The set of signatures of the HandStart message for each player.
	HandStartPlayerSigs  [][]byte `protobuf:"bytes,3,rep,name=hand_start_player_sigs,json=handStartPlayerSigs,proto3" json:"hand_start_player_sigs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostMessage_DeckShuffle) Reset()         { *m = HostMessage_DeckShuffle{} }
func (m *HostMessage_DeckShuffle) String() string { return proto.CompactTextString(m) }
func (*HostMessage_DeckShuffle) ProtoMessage()    {}
func (*HostMessage_DeckShuffle) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{1, 6}
}
func (m *HostMessage_DeckShuffle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostMessage_DeckShuffle.Unmarshal(m, b)
}
func (m *HostMessage_DeckShuffle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostMessage_DeckShuffle.Marshal(b, m, deterministic)
}
func (dst *HostMessage_DeckShuffle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMessage_DeckShuffle.Merge(dst, src)
}
func (m *HostMessage_DeckShuffle) XXX_Size() int {
	return xxx_messageInfo_HostMessage_DeckShuffle.Size(m)
}
func (m *HostMessage_DeckShuffle) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMessage_DeckShuffle.DiscardUnknown(m)
}

var xxx_messageInfo_HostMessage_DeckShuffle proto.InternalMessageInfo

func (m *HostMessage_DeckShuffle) GetUnencryptedStartCards() []uint32 {
	if m != nil {
		return m.UnencryptedStartCards
	}
	return nil
}

func (m *HostMessage_DeckShuffle) GetWorkingCardSet() [][]byte {
	if m != nil {
		return m.WorkingCardSet
	}
	return nil
}

func (m *HostMessage_DeckShuffle) GetHandStartPlayerSigs() [][]byte {
	if m != nil {
		return m.HandStartPlayerSigs
	}
	return nil
}

type HostMessage_GetCardDecryption struct {
	// The fully encrypted card ID as it appeared at last deck shuffle completion.
	EncryptedCard []byte `protobuf:"bytes,1,opt,name=encrypted_card,json=encryptedCard,proto3" json:"encrypted_card,omitempty"`
	// The player this will be given to. Can be empty if it's at the start of the game and this is for for removing the
	// top card on start.
	TargetPlayerId       []byte   `protobuf:"bytes,2,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostMessage_GetCardDecryption) Reset()         { *m = HostMessage_GetCardDecryption{} }
func (m *HostMessage_GetCardDecryption) String() string { return proto.CompactTextString(m) }
func (*HostMessage_GetCardDecryption) ProtoMessage()    {}
func (*HostMessage_GetCardDecryption) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{1, 7}
}
func (m *HostMessage_GetCardDecryption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostMessage_GetCardDecryption.Unmarshal(m, b)
}
func (m *HostMessage_GetCardDecryption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostMessage_GetCardDecryption.Marshal(b, m, deterministic)
}
func (dst *HostMessage_GetCardDecryption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMessage_GetCardDecryption.Merge(dst, src)
}
func (m *HostMessage_GetCardDecryption) XXX_Size() int {
	return xxx_messageInfo_HostMessage_GetCardDecryption.Size(m)
}
func (m *HostMessage_GetCardDecryption) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMessage_GetCardDecryption.DiscardUnknown(m)
}

var xxx_messageInfo_HostMessage_GetCardDecryption proto.InternalMessageInfo

func (m *HostMessage_GetCardDecryption) GetEncryptedCard() []byte {
	if m != nil {
		return m.EncryptedCard
	}
	return nil
}

func (m *HostMessage_GetCardDecryption) GetTargetPlayerId() []byte {
	if m != nil {
		return m.TargetPlayerId
	}
	return nil
}

type HostMessage_GiveCard struct {
	// The fully encrypted card
	EncryptedCard []byte `protobuf:"bytes,1,opt,name=encrypted_card,json=encryptedCard,proto3" json:"encrypted_card,omitempty"`
	// Decryption keys from all players except myself in order of player (so self is empty).
	DecryptionKeys       [][]byte `protobuf:"bytes,2,rep,name=decryption_keys,json=decryptionKeys,proto3" json:"decryption_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostMessage_GiveCard) Reset()         { *m = HostMessage_GiveCard{} }
func (m *HostMessage_GiveCard) String() string { return proto.CompactTextString(m) }
func (*HostMessage_GiveCard) ProtoMessage()    {}
func (*HostMessage_GiveCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{1, 8}
}
func (m *HostMessage_GiveCard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostMessage_GiveCard.Unmarshal(m, b)
}
func (m *HostMessage_GiveCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostMessage_GiveCard.Marshal(b, m, deterministic)
}
func (dst *HostMessage_GiveCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMessage_GiveCard.Merge(dst, src)
}
func (m *HostMessage_GiveCard) XXX_Size() int {
	return xxx_messageInfo_HostMessage_GiveCard.Size(m)
}
func (m *HostMessage_GiveCard) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMessage_GiveCard.DiscardUnknown(m)
}

var xxx_messageInfo_HostMessage_GiveCard proto.InternalMessageInfo

func (m *HostMessage_GiveCard) GetEncryptedCard() []byte {
	if m != nil {
		return m.EncryptedCard
	}
	return nil
}

func (m *HostMessage_GiveCard) GetDecryptionKeys() [][]byte {
	if m != nil {
		return m.DecryptionKeys
	}
	return nil
}

type HostMessage_OneLeftCalled struct {
	// Who called it
	CallerId []byte `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// Who has only one left
	TargetId             []byte   `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostMessage_OneLeftCalled) Reset()         { *m = HostMessage_OneLeftCalled{} }
func (m *HostMessage_OneLeftCalled) String() string { return proto.CompactTextString(m) }
func (*HostMessage_OneLeftCalled) ProtoMessage()    {}
func (*HostMessage_OneLeftCalled) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{1, 9}
}
func (m *HostMessage_OneLeftCalled) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostMessage_OneLeftCalled.Unmarshal(m, b)
}
func (m *HostMessage_OneLeftCalled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostMessage_OneLeftCalled.Marshal(b, m, deterministic)
}
func (dst *HostMessage_OneLeftCalled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMessage_OneLeftCalled.Merge(dst, src)
}
func (m *HostMessage_OneLeftCalled) XXX_Size() int {
	return xxx_messageInfo_HostMessage_OneLeftCalled.Size(m)
}
func (m *HostMessage_OneLeftCalled) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMessage_OneLeftCalled.DiscardUnknown(m)
}

var xxx_messageInfo_HostMessage_OneLeftCalled proto.InternalMessageInfo

func (m *HostMessage_OneLeftCalled) GetCallerId() []byte {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *HostMessage_OneLeftCalled) GetTargetId() []byte {
	if m != nil {
		return m.TargetId
	}
	return nil
}

type HostMessage_HandFinish struct {
	// The infos for each player.
	Info []*HostMessage_HandFinish_PlayerInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	// The set of encrypted cards in the deck.
	EncryptedCardsInDeck [][]byte `protobuf:"bytes,2,rep,name=encrypted_cards_in_deck,json=encryptedCardsInDeck,proto3" json:"encrypted_cards_in_deck,omitempty"`
	// The set of unencrypted cards in the deck.
	UnencryptedCardsInDeck []uint32 `protobuf:"varint,3,rep,packed,name=unencrypted_cards_in_deck,json=unencryptedCardsInDeck,proto3" json:"unencrypted_cards_in_deck,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *HostMessage_HandFinish) Reset()         { *m = HostMessage_HandFinish{} }
func (m *HostMessage_HandFinish) String() string { return proto.CompactTextString(m) }
func (*HostMessage_HandFinish) ProtoMessage()    {}
func (*HostMessage_HandFinish) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{1, 10}
}
func (m *HostMessage_HandFinish) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostMessage_HandFinish.Unmarshal(m, b)
}
func (m *HostMessage_HandFinish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostMessage_HandFinish.Marshal(b, m, deterministic)
}
func (dst *HostMessage_HandFinish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMessage_HandFinish.Merge(dst, src)
}
func (m *HostMessage_HandFinish) XXX_Size() int {
	return xxx_messageInfo_HostMessage_HandFinish.Size(m)
}
func (m *HostMessage_HandFinish) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMessage_HandFinish.DiscardUnknown(m)
}

var xxx_messageInfo_HostMessage_HandFinish proto.InternalMessageInfo

func (m *HostMessage_HandFinish) GetInfo() []*HostMessage_HandFinish_PlayerInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *HostMessage_HandFinish) GetEncryptedCardsInDeck() [][]byte {
	if m != nil {
		return m.EncryptedCardsInDeck
	}
	return nil
}

func (m *HostMessage_HandFinish) GetUnencryptedCardsInDeck() []uint32 {
	if m != nil {
		return m.UnencryptedCardsInDeck
	}
	return nil
}

type HostMessage_HandFinish_PlayerInfo struct {
	// The set of encrypted cards the player holds.
	EncryptedCardsInHand [][]byte `protobuf:"bytes,1,rep,name=encrypted_cards_in_hand,json=encryptedCardsInHand,proto3" json:"encrypted_cards_in_hand,omitempty"`
	// The set of unencrypted cards the player holds.
	UnencryptedCardsInHand []int32 `protobuf:"varint,2,rep,packed,name=unencrypted_cards_in_hand,json=unencryptedCardsInHand,proto3" json:"unencrypted_cards_in_hand,omitempty"`
	// The map of all the player's decryption keys for all cards.
	CardDecryptionKeys map[string][]byte `protobuf:"bytes,3,rep,name=card_decryption_keys,json=cardDecryptionKeys,proto3" json:"card_decryption_keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The score for this player after the hand.
	Score                int32    `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostMessage_HandFinish_PlayerInfo) Reset()         { *m = HostMessage_HandFinish_PlayerInfo{} }
func (m *HostMessage_HandFinish_PlayerInfo) String() string { return proto.CompactTextString(m) }
func (*HostMessage_HandFinish_PlayerInfo) ProtoMessage()    {}
func (*HostMessage_HandFinish_PlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{1, 10, 0}
}
func (m *HostMessage_HandFinish_PlayerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostMessage_HandFinish_PlayerInfo.Unmarshal(m, b)
}
func (m *HostMessage_HandFinish_PlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostMessage_HandFinish_PlayerInfo.Marshal(b, m, deterministic)
}
func (dst *HostMessage_HandFinish_PlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMessage_HandFinish_PlayerInfo.Merge(dst, src)
}
func (m *HostMessage_HandFinish_PlayerInfo) XXX_Size() int {
	return xxx_messageInfo_HostMessage_HandFinish_PlayerInfo.Size(m)
}
func (m *HostMessage_HandFinish_PlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMessage_HandFinish_PlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HostMessage_HandFinish_PlayerInfo proto.InternalMessageInfo

func (m *HostMessage_HandFinish_PlayerInfo) GetEncryptedCardsInHand() [][]byte {
	if m != nil {
		return m.EncryptedCardsInHand
	}
	return nil
}

func (m *HostMessage_HandFinish_PlayerInfo) GetUnencryptedCardsInHand() []int32 {
	if m != nil {
		return m.UnencryptedCardsInHand
	}
	return nil
}

func (m *HostMessage_HandFinish_PlayerInfo) GetCardDecryptionKeys() map[string][]byte {
	if m != nil {
		return m.CardDecryptionKeys
	}
	return nil
}

func (m *HostMessage_HandFinish_PlayerInfo) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type HostMessage_HandComplete struct {
	// The entire hand finish that was sent to all players.
	HandFinish *HostMessage_HandFinish `protobuf:"bytes,1,opt,name=hand_finish,json=handFinish,proto3" json:"hand_finish,omitempty"`
	// The signatures of the hand finish structure by each player.
	HandFinishPlayerSigs [][]byte `protobuf:"bytes,2,rep,name=hand_finish_player_sigs,json=handFinishPlayerSigs,proto3" json:"hand_finish_player_sigs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostMessage_HandComplete) Reset()         { *m = HostMessage_HandComplete{} }
func (m *HostMessage_HandComplete) String() string { return proto.CompactTextString(m) }
func (*HostMessage_HandComplete) ProtoMessage()    {}
func (*HostMessage_HandComplete) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{1, 11}
}
func (m *HostMessage_HandComplete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostMessage_HandComplete.Unmarshal(m, b)
}
func (m *HostMessage_HandComplete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostMessage_HandComplete.Marshal(b, m, deterministic)
}
func (dst *HostMessage_HandComplete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMessage_HandComplete.Merge(dst, src)
}
func (m *HostMessage_HandComplete) XXX_Size() int {
	return xxx_messageInfo_HostMessage_HandComplete.Size(m)
}
func (m *HostMessage_HandComplete) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMessage_HandComplete.DiscardUnknown(m)
}

var xxx_messageInfo_HostMessage_HandComplete proto.InternalMessageInfo

func (m *HostMessage_HandComplete) GetHandFinish() *HostMessage_HandFinish {
	if m != nil {
		return m.HandFinish
	}
	return nil
}

func (m *HostMessage_HandComplete) GetHandFinishPlayerSigs() [][]byte {
	if m != nil {
		return m.HandFinishPlayerSigs
	}
	return nil
}

type ChatMessage struct {
	PlayerId             []byte   `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	PlayerName           string   `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	Nonce                int64    `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Contents             string   `protobuf:"bytes,4,opt,name=contents,proto3" json:"contents,omitempty"`
	Sig                  []byte   `protobuf:"bytes,5,opt,name=sig,proto3" json:"sig,omitempty"`
	HostUtcMs            uint64   `protobuf:"varint,6,opt,name=host_utc_ms,json=hostUtcMs,proto3" json:"host_utc_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{2}
}
func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessage.Unmarshal(m, b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
}
func (dst *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(dst, src)
}
func (m *ChatMessage) XXX_Size() int {
	return xxx_messageInfo_ChatMessage.Size(m)
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetPlayerId() []byte {
	if m != nil {
		return m.PlayerId
	}
	return nil
}

func (m *ChatMessage) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *ChatMessage) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *ChatMessage) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

func (m *ChatMessage) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *ChatMessage) GetHostUtcMs() uint64 {
	if m != nil {
		return m.HostUtcMs
	}
	return 0
}

type Player struct {
	// ID is pub key
	Id                   []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sig                  []byte   `protobuf:"bytes,4,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_1317e2af8e42de42, []int{3}
}
func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (dst *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(dst, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Player) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Player) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func init() {
	proto.RegisterType((*ClientMessage)(nil), "pb.ClientMessage")
	proto.RegisterType((*ClientMessage_DeckShuffle)(nil), "pb.ClientMessage.DeckShuffle")
	proto.RegisterType((*ClientMessage_PlayCard)(nil), "pb.ClientMessage.PlayCard")
	proto.RegisterType((*ClientMessage_HandInfo)(nil), "pb.ClientMessage.HandInfo")
	proto.RegisterMapType((map[string][]byte)(nil), "pb.ClientMessage.HandInfo.CardDecryptionKeysEntry")
	proto.RegisterType((*HostMessage)(nil), "pb.HostMessage")
	proto.RegisterType((*HostMessage_Welcome)(nil), "pb.HostMessage.Welcome")
	proto.RegisterType((*HostMessage_PlayersUpdate)(nil), "pb.HostMessage.PlayersUpdate")
	proto.RegisterType((*HostMessage_GameUpdate)(nil), "pb.HostMessage.GameUpdate")
	proto.RegisterType((*HostMessage_ChatMessagesAdded)(nil), "pb.HostMessage.ChatMessagesAdded")
	proto.RegisterType((*HostMessage_GameStart)(nil), "pb.HostMessage.GameStart")
	proto.RegisterType((*HostMessage_HandStart)(nil), "pb.HostMessage.HandStart")
	proto.RegisterType((*HostMessage_DeckShuffle)(nil), "pb.HostMessage.DeckShuffle")
	proto.RegisterType((*HostMessage_GetCardDecryption)(nil), "pb.HostMessage.GetCardDecryption")
	proto.RegisterType((*HostMessage_GiveCard)(nil), "pb.HostMessage.GiveCard")
	proto.RegisterType((*HostMessage_OneLeftCalled)(nil), "pb.HostMessage.OneLeftCalled")
	proto.RegisterType((*HostMessage_HandFinish)(nil), "pb.HostMessage.HandFinish")
	proto.RegisterType((*HostMessage_HandFinish_PlayerInfo)(nil), "pb.HostMessage.HandFinish.PlayerInfo")
	proto.RegisterMapType((map[string][]byte)(nil), "pb.HostMessage.HandFinish.PlayerInfo.CardDecryptionKeysEntry")
	proto.RegisterType((*HostMessage_HandComplete)(nil), "pb.HostMessage.HandComplete")
	proto.RegisterType((*ChatMessage)(nil), "pb.ChatMessage")
	proto.RegisterType((*Player)(nil), "pb.Player")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HostClient is the client API for Host service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HostClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (Host_StreamClient, error)
}

type hostClient struct {
	cc *grpc.ClientConn
}

func NewHostClient(cc *grpc.ClientConn) HostClient {
	return &hostClient{cc}
}

func (c *hostClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Host_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Host_serviceDesc.Streams[0], "/pb.Host/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostStreamClient{stream}
	return x, nil
}

type Host_StreamClient interface {
	Send(*ClientMessage) error
	Recv() (*HostMessage, error)
	grpc.ClientStream
}

type hostStreamClient struct {
	grpc.ClientStream
}

func (x *hostStreamClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hostStreamClient) Recv() (*HostMessage, error) {
	m := new(HostMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HostServer is the server API for Host service.
type HostServer interface {
	Stream(Host_StreamServer) error
}

func RegisterHostServer(s *grpc.Server, srv HostServer) {
	s.RegisterService(&_Host_serviceDesc, srv)
}

func _Host_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HostServer).Stream(&hostStreamServer{stream})
}

type Host_StreamServer interface {
	Send(*HostMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type hostStreamServer struct {
	grpc.ServerStream
}

func (x *hostStreamServer) Send(m *HostMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hostStreamServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Host_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Host",
	HandlerType: (*HostServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Host_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "game.proto",
}

func init() { proto.RegisterFile("game.proto", fileDescriptor_game_1317e2af8e42de42) }

var fileDescriptor_game_1317e2af8e42de42 = []byte{
	// 1688 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x4b, 0x73, 0xdb, 0x46,
	0x12, 0xe6, 0x53, 0x22, 0x9b, 0x04, 0x49, 0x8d, 0xbc, 0x16, 0x04, 0xdb, 0xbb, 0xb2, 0x77, 0xed,
	0xe5, 0xee, 0xba, 0x64, 0x99, 0x5e, 0xaf, 0x1f, 0x5b, 0xde, 0x8d, 0x4d, 0xc9, 0x06, 0x63, 0x3b,
	0x71, 0x0d, 0xcb, 0xe5, 0xaa, 0x5c, 0x50, 0x30, 0x30, 0xa4, 0x10, 0x81, 0x00, 0x03, 0x80, 0x52,
	0x74, 0xcd, 0x29, 0x97, 0xfc, 0x89, 0x54, 0x2e, 0x39, 0xa4, 0xf2, 0x27, 0x72, 0xcc, 0x4f, 0xc9,
	0x21, 0x3f, 0x21, 0xd5, 0x33, 0x83, 0x17, 0x09, 0xd9, 0x72, 0x55, 0xaa, 0x72, 0xe3, 0xf4, 0x0b,
	0x3d, 0xfd, 0xf8, 0xba, 0x87, 0x00, 0x53, 0x73, 0xc6, 0x76, 0xe7, 0x81, 0x1f, 0xf9, 0xa4, 0x32,
	0x7f, 0x7b, 0xed, 0x9b, 0x06, 0x28, 0x43, 0xd7, 0x61, 0x5e, 0xf4, 0x92, 0x85, 0xa1, 0x39, 0x65,
	0xe4, 0x16, 0xb4, 0x3f, 0xf7, 0x1d, 0xcf, 0x08, 0xd8, 0x17, 0x0b, 0x16, 0x46, 0x6a, 0x79, 0xa7,
	0xdc, 0x6f, 0x0d, 0x60, 0x77, 0xfe, 0x76, 0xf7, 0x95, 0x6b, 0x9e, 0xb2, 0x40, 0x2f, 0xd1, 0x16,
	0x4a, 0x50, 0x21, 0x40, 0x6e, 0x40, 0x07, 0x8d, 0x1a, 0x61, 0x64, 0x06, 0x91, 0x11, 0x3a, 0x53,
	0xb5, 0xb2, 0x53, 0xee, 0xb7, 0xf5, 0x12, 0x6d, 0x23, 0x7d, 0x8c, 0xe4, 0xb1, 0x33, 0x45, 0xb9,
	0x43, 0xd3, 0xb3, 0x33, 0x72, 0xd5, 0x58, 0x0e, 0xe9, 0x89, 0xdc, 0xc7, 0xd0, 0x0b, 0x0f, 0x17,
	0x93, 0x89, 0xcb, 0x8c, 0x80, 0x85, 0x73, 0xdf, 0x0b, 0x99, 0x5a, 0xe3, 0x4e, 0x5c, 0x41, 0x27,
	0x72, 0xde, 0xee, 0xee, 0x33, 0xeb, 0x68, 0x2c, 0xa4, 0xf5, 0x12, 0xed, 0x4a, 0x45, 0x2a, 0xf5,
	0xc8, 0x1e, 0x6c, 0x5a, 0x66, 0x60, 0x1b, 0x36, 0xb3, 0x82, 0xd3, 0x79, 0xe4, 0xf8, 0x9e, 0x71,
	0xc4, 0x4e, 0xd5, 0xba, 0xfc, 0xf0, 0x06, 0x32, 0xf7, 0x13, 0xde, 0x73, 0x76, 0x4a, 0x1e, 0x40,
	0x73, 0xee, 0x9a, 0xa7, 0x06, 0x72, 0xd4, 0x35, 0xfe, 0x59, 0x6d, 0xf5, 0xb3, 0x18, 0x89, 0xa1,
	0x19, 0xd8, 0x7a, 0x89, 0x36, 0xe6, 0xf2, 0x37, 0xb9, 0x02, 0x4d, 0x3b, 0x30, 0x4f, 0x84, 0xea,
	0xfa, 0x4e, 0xb9, 0xdf, 0x40, 0x36, 0x92, 0x38, 0xfb, 0x11, 0xb4, 0x02, 0x76, 0xcc, 0x4c, 0xd7,
	0xc0, 0xeb, 0xaa, 0x8d, 0xb3, 0x6c, 0xeb, 0xa6, 0x67, 0x8f, 0xbc, 0x89, 0xaf, 0x97, 0x28, 0x08,
	0x05, 0xa4, 0x90, 0x9b, 0xb0, 0xc1, 0xc3, 0x37, 0x71, 0x3c, 0x27, 0x3c, 0x64, 0x36, 0x8f, 0x60,
	0x53, 0x5e, 0xa4, 0x8b, 0xac, 0xa7, 0x92, 0x83, 0x41, 0xbc, 0x08, 0x75, 0x16, 0x04, 0x7e, 0xa0,
	0xc2, 0x4e, 0xb9, 0xdf, 0xd4, 0x4b, 0x54, 0x1c, 0xb5, 0x7b, 0xd0, 0xca, 0x84, 0x8c, 0xf4, 0xa1,
	0x77, 0xe2, 0x07, 0x47, 0x8e, 0x37, 0xe5, 0x5e, 0x1b, 0x21, 0xc3, 0x84, 0x57, 0xfb, 0x6d, 0xda,
	0x91, 0x74, 0x74, 0x7d, 0xcc, 0x22, 0xed, 0x87, 0x32, 0x34, 0xe2, 0x5b, 0x93, 0xeb, 0xd0, 0x61,
	0x1e, 0x8f, 0x1a, 0xb3, 0xc5, 0x75, 0xb1, 0x4a, 0xda, 0x54, 0x49, 0xa8, 0x5c, 0xec, 0x1f, 0xd0,
	0x5b, 0x78, 0x4b, 0x82, 0x58, 0x1b, 0x75, 0xda, 0xcd, 0xd0, 0xb9, 0xe8, 0x1e, 0x5c, 0x28, 0x48,
	0x54, 0xa8, 0x56, 0xb9, 0x33, 0x64, 0x25, 0x4f, 0x21, 0xb9, 0x02, 0x70, 0xe2, 0xb8, 0xb6, 0x61,
	0xf9, 0xae, 0x1f, 0xf0, 0x02, 0xa9, 0xd3, 0x26, 0x52, 0x86, 0x48, 0xd0, 0xbe, 0xaf, 0x40, 0x23,
	0x8e, 0x24, 0xb9, 0x0b, 0x5b, 0x79, 0x37, 0x42, 0xc3, 0xf1, 0x44, 0x1a, 0xc4, 0x6d, 0x2f, 0xe4,
	0xbc, 0x09, 0x47, 0x1e, 0x0f, 0xf9, 0x03, 0xd8, 0x5e, 0xf6, 0x3f, 0x55, 0xac, 0xec, 0x54, 0xfb,
	0x75, 0x7a, 0x71, 0xe9, 0x22, 0xb1, 0xaa, 0xfd, 0x8e, 0xfb, 0xb4, 0x06, 0x83, 0xb3, 0xb3, 0xbe,
	0x3b, 0x5c, 0xb9, 0xea, 0x81, 0x17, 0x05, 0xa7, 0x45, 0x31, 0xd0, 0x0e, 0x60, 0xeb, 0x0c, 0x71,
	0xd2, 0x83, 0x2a, 0x56, 0x3a, 0xe6, 0xa5, 0x49, 0xf1, 0x27, 0xb9, 0x00, 0xf5, 0x63, 0xd3, 0x5d,
	0x30, 0xd1, 0x9e, 0x54, 0x1c, 0x1e, 0x56, 0xee, 0x97, 0x9f, 0x34, 0x61, 0x7d, 0x26, 0xdc, 0xb8,
	0xf6, 0xeb, 0x36, 0xb4, 0x74, 0x3f, 0x4c, 0xd0, 0xe0, 0x0e, 0xac, 0x9f, 0x30, 0xd7, 0xf2, 0x67,
	0x4c, 0x02, 0xc1, 0x16, 0xba, 0x9e, 0x91, 0xd8, 0x7d, 0x23, 0xd8, 0x7a, 0x89, 0xc6, 0x92, 0xe4,
	0x29, 0x74, 0xe6, 0x1c, 0x2a, 0x42, 0x63, 0x31, 0xb7, 0xcd, 0x48, 0x7c, 0x52, 0xf6, 0x6f, 0x56,
	0x57, 0x00, 0x4a, 0xf8, 0x9a, 0x0b, 0xe9, 0x25, 0xaa, 0xcc, 0xb3, 0x04, 0xec, 0x18, 0x8e, 0x2c,
	0xd2, 0x48, 0x35, 0xed, 0x98, 0xac, 0x91, 0x67, 0xe6, 0x8c, 0x25, 0x16, 0x38, 0xbe, 0x49, 0xf5,
	0x7d, 0x68, 0x59, 0x87, 0x66, 0x14, 0xab, 0x0b, 0x0c, 0xb9, 0xba, 0xac, 0x3e, 0x3c, 0x34, 0xe3,
	0xdf, 0xe1, 0x63, 0xdb, 0x66, 0xd8, 0xd3, 0x80, 0x7a, 0xd2, 0xca, 0x43, 0x81, 0x99, 0x02, 0xb6,
	0x38, 0x72, 0xb4, 0x06, 0xdb, 0x45, 0x3e, 0x70, 0x00, 0xd3, 0x4b, 0xb4, 0x99, 0xa0, 0x1e, 0xea,
	0xa6, 0x90, 0x27, 0xd1, 0x64, 0x45, 0x57, 0x8f, 0xc1, 0x0f, 0x75, 0x13, 0x24, 0x24, 0x07, 0x10,
	0xa3, 0x19, 0xaa, 0x4f, 0x99, 0x71, 0x9b, 0x63, 0x4a, 0x6b, 0x70, 0x69, 0xd9, 0x40, 0x1e, 0x03,
	0x15, 0xa9, 0x35, 0x46, 0xa5, 0xdb, 0xab, 0x66, 0x06, 0x12, 0x79, 0x3e, 0xc4, 0xcc, 0x80, 0xe8,
	0x29, 0x28, 0x5b, 0xfe, 0x6c, 0xee, 0xb2, 0x88, 0x71, 0xf0, 0x79, 0xaf, 0x9d, 0xf8, 0xeb, 0x43,
	0xa9, 0x45, 0x5e, 0x40, 0x77, 0xa9, 0x33, 0x38, 0x46, 0x15, 0x64, 0xe6, 0x19, 0x8b, 0xf2, 0xd5,
	0xad, 0x97, 0x68, 0x27, 0xdf, 0x05, 0xe4, 0x1e, 0x34, 0xa7, 0xce, 0x31, 0x13, 0xd8, 0xd2, 0xe2,
	0x76, 0xd4, 0x15, 0x3b, 0xce, 0x31, 0x8b, 0xc1, 0x7a, 0x2a, 0x7f, 0x93, 0x67, 0xd0, 0xf5, 0x3d,
	0x66, 0xb8, 0x6c, 0x12, 0x19, 0x96, 0xe9, 0xba, 0xcc, 0x56, 0xdb, 0xc5, 0x45, 0xfa, 0xa9, 0xc7,
	0x5e, 0xb0, 0x49, 0x34, 0xe4, 0x42, 0x18, 0x19, 0x3f, 0x4b, 0x20, 0xb7, 0x60, 0x33, 0x83, 0xcb,
	0x49, 0xae, 0x14, 0x89, 0xff, 0xbd, 0x14, 0x99, 0x65, 0x46, 0x9e, 0x17, 0x29, 0x0c, 0xd4, 0x4e,
	0x71, 0x75, 0xeb, 0x89, 0x7a, 0x81, 0xb1, 0x01, 0x19, 0x82, 0xc2, 0x8d, 0x25, 0x49, 0xe9, 0x72,
	0x33, 0x97, 0x8b, 0xcc, 0xc4, 0x29, 0x88, 0x27, 0x6e, 0x92, 0x92, 0x64, 0x58, 0xf4, 0xf2, 0xc3,
	0xe2, 0xdb, 0x32, 0xac, 0xcb, 0xf6, 0x26, 0x7f, 0x83, 0x75, 0xd9, 0x9c, 0x1c, 0x32, 0x73, 0x1b,
	0x01, 0x8d, 0x59, 0xe4, 0xbf, 0xf9, 0x8e, 0xad, 0xbc, 0xaf, 0x63, 0x73, 0xfd, 0xfa, 0x6f, 0x50,
	0x78, 0xbf, 0x4a, 0x2c, 0x8a, 0xc1, 0xb2, 0xcb, 0xc1, 0x32, 0xed, 0x52, 0xda, 0xb6, 0x32, 0x2d,
	0xab, 0xdd, 0x05, 0x25, 0x07, 0x23, 0xe7, 0xf3, 0x54, 0xfb, 0xa5, 0x06, 0x90, 0xfa, 0x41, 0xb6,
	0x60, 0x9d, 0x3b, 0xee, 0xc4, 0xa3, 0x6c, 0x0d, 0x8f, 0x23, 0x1b, 0x19, 0x3c, 0xc0, 0x8e, 0x2d,
	0x71, 0x73, 0x0d, 0x8f, 0x23, 0x3e, 0x03, 0x6d, 0x66, 0x1d, 0x19, 0x01, 0x9b, 0x99, 0x8e, 0xe7,
	0x78, 0x62, 0x9d, 0xa9, 0x53, 0x05, 0xa9, 0x34, 0x26, 0x92, 0xbf, 0x82, 0x62, 0x3b, 0xa1, 0x18,
	0xae, 0x91, 0x69, 0x1d, 0xa9, 0xb5, 0x9d, 0x6a, 0x5f, 0xa1, 0x6d, 0x49, 0x1c, 0x23, 0x8d, 0xdc,
	0x04, 0x22, 0xfc, 0x12, 0x53, 0xd8, 0xf2, 0x17, 0x5e, 0x14, 0xaa, 0x75, 0x2e, 0xd9, 0x13, 0x1c,
	0x2c, 0xda, 0x21, 0xa7, 0xa3, 0x49, 0x29, 0x1d, 0x5a, 0x7e, 0xc0, 0x42, 0x75, 0x4d, 0x98, 0x14,
	0xc4, 0x31, 0xa7, 0x91, 0x1b, 0xd0, 0x75, 0xcd, 0x30, 0x32, 0x32, 0x33, 0x12, 0xe1, 0x43, 0xa1,
	0x0a, 0x92, 0xdf, 0xc4, 0x73, 0x92, 0x5c, 0x85, 0xb6, 0xcd, 0x4c, 0x97, 0x05, 0x86, 0xe3, 0xd9,
	0xec, 0x4b, 0x0e, 0x0e, 0x0a, 0x6d, 0x09, 0xda, 0x08, 0x49, 0x7c, 0x36, 0x2f, 0x82, 0x80, 0x79,
	0x91, 0x21, 0xbf, 0x2b, 0x44, 0x9b, 0x5c, 0x94, 0x48, 0x9e, 0x08, 0xb0, 0xd0, 0x50, 0x61, 0x7d,
	0xe2, 0x07, 0x27, 0xd8, 0x93, 0xd8, 0xdb, 0x0d, 0x1a, 0x1f, 0xc9, 0x3f, 0x61, 0x23, 0x3c, 0x34,
	0x03, 0x39, 0x4d, 0x8d, 0x79, 0xe0, 0xcc, 0x18, 0xef, 0xdb, 0x36, 0x22, 0x05, 0x32, 0xf0, 0xa2,
	0xaf, 0x90, 0x4c, 0x1e, 0xc1, 0x25, 0x7e, 0x85, 0x38, 0x7e, 0x4b, 0x9b, 0x44, 0x9b, 0x6b, 0xa9,
	0x28, 0xb2, 0x2f, 0x24, 0x0e, 0x72, 0x2b, 0xc5, 0xff, 0xe1, 0x72, 0x4e, 0x7d, 0x79, 0x14, 0x2b,
	0x7c, 0xf2, 0x6f, 0x67, 0xf4, 0x97, 0x36, 0x8c, 0xa4, 0x2d, 0x3a, 0xb9, 0xb6, 0xc0, 0x3d, 0x2f,
	0x8e, 0x83, 0xcd, 0xfb, 0xad, 0x1d, 0xaf, 0x81, 0x2c, 0x18, 0xd9, 0x4f, 0x36, 0x61, 0x43, 0x76,
	0x23, 0x7e, 0x2a, 0x60, 0x66, 0xe8, 0x7b, 0xda, 0x47, 0xb0, 0xb1, 0x32, 0x68, 0xc8, 0xbf, 0xa0,
	0x91, 0xd4, 0x7a, 0xb9, 0xb8, 0xd6, 0x13, 0x01, 0xed, 0x31, 0x34, 0x93, 0x29, 0x43, 0x3a, 0x50,
	0x49, 0x2a, 0xb5, 0xe2, 0xd8, 0xd9, 0x9a, 0xaf, 0x9e, 0x5d, 0xf3, 0x3f, 0x95, 0xa1, 0x99, 0x4c,
	0x9b, 0x15, 0x1b, 0x85, 0xa9, 0xa9, 0x14, 0xa7, 0x66, 0xa5, 0x04, 0xab, 0x05, 0x25, 0xb8, 0x5c,
	0x5a, 0xb5, 0xd5, 0xd2, 0xba, 0x03, 0x17, 0x33, 0x6f, 0x87, 0xd8, 0xa4, 0x33, 0x15, 0xc5, 0xdf,
	0xa6, 0x9b, 0xc9, 0x2c, 0x15, 0x77, 0x19, 0x3b, 0xd3, 0x50, 0xfb, 0xae, 0x9c, 0x5f, 0x62, 0xff,
	0x03, 0x5b, 0xd9, 0x35, 0x4d, 0xd8, 0xe2, 0xcb, 0x1a, 0x8f, 0xaa, 0x42, 0xff, 0x94, 0x61, 0x73,
	0x63, 0x7c, 0x53, 0x2b, 0x5c, 0x7e, 0x2b, 0x45, 0xcb, 0x2f, 0xba, 0x99, 0x79, 0xba, 0x64, 0xdd,
	0x14, 0xfb, 0xe9, 0x66, 0x32, 0xb6, 0x33, 0x6e, 0xda, 0xb0, 0xb1, 0x32, 0xc1, 0xce, 0xbb, 0x39,
	0xf7, 0xa1, 0x17, 0x99, 0xc1, 0x94, 0xa5, 0x1d, 0x17, 0xc3, 0x4f, 0x47, 0xd0, 0x65, 0xb7, 0xd9,
	0xda, 0x67, 0xd0, 0x88, 0xe7, 0xdb, 0x79, 0x8d, 0xff, 0x1d, 0xba, 0xcb, 0xbd, 0x20, 0xaf, 0x6d,
	0xe7, 0xd7, 0xcb, 0x11, 0x28, 0xb9, 0xe1, 0x47, 0x2e, 0x41, 0x93, 0xcf, 0xca, 0x20, 0xc5, 0xc9,
	0x86, 0x20, 0x8c, 0x38, 0x53, 0xfa, 0x9c, 0x38, 0xdb, 0x10, 0x84, 0x91, 0xad, 0x7d, 0x5d, 0x03,
	0x48, 0x47, 0x19, 0x79, 0x00, 0x35, 0xc7, 0x9b, 0xf8, 0xb2, 0xea, 0xaf, 0x9f, 0x3d, 0xf4, 0x76,
	0x63, 0x58, 0x99, 0xf8, 0x94, 0xab, 0x9c, 0xb1, 0xcb, 0x23, 0xe8, 0xca, 0x5b, 0xac, 0xec, 0xf2,
	0x58, 0x2b, 0x67, 0xee, 0xf2, 0x5c, 0x51, 0x54, 0x6f, 0xc1, 0x2e, 0x8f, 0xaa, 0xda, 0xcf, 0x15,
	0x80, 0xd4, 0x8d, 0x3f, 0xe0, 0x31, 0xe1, 0xbf, 0xf3, 0x31, 0xf1, 0xe8, 0x5c, 0xd1, 0xfb, 0x90,
	0x77, 0x05, 0x3e, 0x15, 0x78, 0x5f, 0xcb, 0x67, 0x95, 0x38, 0xfc, 0x4e, 0xaf, 0x0d, 0xed, 0xab,
	0x32, 0xb4, 0xb3, 0xeb, 0x08, 0x2e, 0x0d, 0x99, 0x85, 0x48, 0xbe, 0x33, 0xde, 0xb1, 0x08, 0x51,
	0x48, 0xd7, 0x20, 0xcc, 0x46, 0x76, 0x9b, 0xca, 0xf6, 0xa6, 0x2c, 0x87, 0x54, 0x38, 0x6d, 0xce,
	0xec, 0x93, 0xe7, 0xc7, 0x32, 0xb4, 0x32, 0x90, 0x8b, 0x75, 0x9c, 0x36, 0x9d, 0x2c, 0xf2, 0x18,
	0xdc, 0xc9, 0x5f, 0xa0, 0x25, 0x99, 0x9e, 0x29, 0xe1, 0xb1, 0x49, 0x41, 0x90, 0x3e, 0x31, 0x67,
	0x0c, 0xef, 0xed, 0xf9, 0x9e, 0x25, 0x5e, 0x2b, 0x55, 0x2a, 0x0e, 0x44, 0x83, 0x86, 0xe5, 0x7b,
	0x11, 0xc3, 0xb1, 0x5e, 0xe3, 0x3a, 0xc9, 0x19, 0x63, 0x87, 0x4f, 0x79, 0xfe, 0x9f, 0x04, 0xc5,
	0x9f, 0xe4, 0xcf, 0xd0, 0x3a, 0xf4, 0xc3, 0xc8, 0x58, 0x44, 0x96, 0x31, 0x0b, 0xf9, 0xbb, 0xa1,
	0x46, 0x9b, 0x48, 0x7a, 0x1d, 0x59, 0x2f, 0xc3, 0x6b, 0xff, 0x83, 0x35, 0x71, 0x95, 0x15, 0x0c,
	0x27, 0x50, 0xcb, 0xf8, 0xc5, 0x7f, 0xc7, 0xf6, 0x6b, 0x89, 0xfd, 0xc1, 0x7d, 0xa8, 0x61, 0x64,
	0xc9, 0x1e, 0xac, 0x8d, 0xa3, 0x80, 0x99, 0x33, 0xb2, 0xb1, 0xf2, 0x20, 0xd5, 0xba, 0x4b, 0x09,
	0xe8, 0x97, 0xf7, 0xca, 0x6f, 0xd7, 0xf8, 0x3f, 0x47, 0x77, 0x7e, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0xff, 0x46, 0xc3, 0xce, 0x47, 0x12, 0x00, 0x00,
}
